#include <Arduino.h>
#include <SPI.h>
#include <Ethernet.h>
#include <Servo.h>

// Enter a MAC address for your controller below.
// Newer Ethernet shields have a MAC address printed on a sticker on the shield
byte mac[] = {

  0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x02
};

Servo pusher;
EthernetServer server(80);

void dhcpRenew();

void setup() {
  Ethernet.init(10);  // Most Arduino shields
  // Open serial communications and wait for port to open:

  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // start the Ethernet connection:
  Serial.println("Initialize Ethernet with DHCP:");
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    if (Ethernet.hardwareStatus() == EthernetNoHardware) {
      Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
    } else if (Ethernet.linkStatus() == LinkOFF) {
      Serial.println("Ethernet cable is not connected.");
    }

    // no point in carrying on, so do nothing forevermore:
    while (true) {
      delay(1);
    }
  }

  // print your local IP address:
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());

  pusher.attach(3);
  pusher.write(80);

}

String payload = "";
void loop() {
  dhcpRenew();

  EthernetClient client = server.available();
   if (client) {
     enum states { S, G, GE, GET, GET_, GET_S, F };
     int state = S;

     boolean currentLineIsBlank = true;
     while (client.connected()) {
       if (client.available()) {
         char c = client.read();
         Serial.write(c);

         // PARSE GET REQUEST
         switch (state) {
           case S:{
             payload = "";
             if (c == 'G') state = G;
             break;
           }
           case G:{
             if (c == 'E') state = GE;
             else state = S;
             break;
           }
           case GE:{
             if (c == 'T') state = GET;
             else state = S;
             break;
           }
           case GET:{
             if (c == ' ') state = GET_;
             else state = S;
             break;
           }
           case GET_:{
             if (c == '/') state = GET_S;
             else if (c == ' ') state = GET_;
             else state = S;
             break;
           }
           case GET_S:{
             if (c >= '0' && c <= 'z') payload += c;
             else state = F;
             break;
           }
           case F:{
             break;
           }
         }
         //END OF PARSING


         // if you've gotten to the end of the line (received a newline
         // character) and the line is blank, the http request has ended,
         // so you can send a reply
         if (c == '\n' && currentLineIsBlank) {
           Serial.print("===================>");
           Serial.print(payload);
           Serial.print("<===================");
           if (payload == String("push")) {
             pusher.write(95);
           } else if (payload == String("release")) {
             pusher.write(80);
           }
           // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");  // the connection will be closed after completion of the response
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          client.println("ahoj");
          client.println("</html>");
           break;
         }
         if (c == '\n') {
           // you're starting a new line
           currentLineIsBlank = true;
         } else if (c != '\r') {
           // you've gotten a character on the current line
           currentLineIsBlank = false;
         }
       }
     }
     // give the web browser time to receive the data
     delay(1);
     // close the connection:
     client.stop();
   }
 }


void dhcpRenew() {

    switch (Ethernet.maintain()) {
      case 1:
        //renewed fail
        Serial.println("Error: renewed fail");
        break;
      case 2:
        //renewed success
        Serial.println("Renewed success");
        //print your local IP address:
        Serial.print("My IP address: ");
        Serial.println(Ethernet.localIP());
        break;
      case 3:
        //rebind fail
        Serial.println("Error: rebind fail");
        break;
      case 4:
        //rebind success
        Serial.println("Rebind success");
        //print your local IP address:
        Serial.print("My IP address: ");
        Serial.println(Ethernet.localIP());
        break;
      default:
        //nothing happened
        break;
    }
}
